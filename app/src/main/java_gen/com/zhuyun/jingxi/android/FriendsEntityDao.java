package com.zhuyun.jingxi.android;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zhuyun.jingxi.android.FriendsEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FRIENDS_ENTITY.
*/
public class FriendsEntityDao extends AbstractDao<FriendsEntity, Long> {

    public static final String TABLENAME = "FRIENDS_ENTITY";

    /**
     * Properties of entity FriendsEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FriendsId = new Property(1, int.class, "friendsId", false, "FRIENDS_ID");
        public final static Property Gender = new Property(2, Integer.class, "gender", false, "GENDER");
        public final static Property NickName = new Property(3, String.class, "nickName", false, "NICK_NAME");
        public final static Property Mobile = new Property(4, String.class, "mobile", false, "MOBILE");
        public final static Property Portrait = new Property(5, String.class, "portrait", false, "PORTRAIT");
        public final static Property RName = new Property(6, String.class, "rName", false, "R_NAME");
    };


    public FriendsEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FriendsEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FRIENDS_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'FRIENDS_ID' INTEGER NOT NULL UNIQUE ," + // 1: friendsId
                "'GENDER' INTEGER," + // 2: gender
                "'NICK_NAME' TEXT," + // 3: nickName
                "'MOBILE' TEXT," + // 4: mobile
                "'PORTRAIT' TEXT," + // 5: portrait
                "'R_NAME' TEXT);"); // 6: rName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRIENDS_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FriendsEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFriendsId());
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(3, gender);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(6, portrait);
        }
 
        String rName = entity.getRName();
        if (rName != null) {
            stmt.bindString(7, rName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FriendsEntity readEntity(Cursor cursor, int offset) {
        FriendsEntity entity = new FriendsEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // friendsId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // gender
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobile
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // portrait
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // rName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FriendsEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFriendsId(cursor.getInt(offset + 1));
        entity.setGender(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMobile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPortrait(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FriendsEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FriendsEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
