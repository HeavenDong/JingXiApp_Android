package com.zhuyun.jingxi.android;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zhuyun.jingxi.android.GiftRecommentEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GIFT_RECOMMENT_ENTITY.
*/
public class GiftRecommentEntityDao extends AbstractDao<GiftRecommentEntity, Long> {

    public static final String TABLENAME = "GIFT_RECOMMENT_ENTITY";

    /**
     * Properties of entity GiftRecommentEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RecommenId = new Property(1, Long.class, "recommenId", false, "RECOMMEN_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property ImgIconUrl = new Property(3, String.class, "imgIconUrl", false, "IMG_ICON_URL");
        public final static Property UtpTime = new Property(4, Long.class, "utpTime", false, "UTP_TIME");
        public final static Property Sort = new Property(5, Integer.class, "sort", false, "SORT");
        public final static Property Type = new Property(6, Integer.class, "type", false, "TYPE");
        public final static Property WishCount = new Property(7, Integer.class, "wishCount", false, "WISH_COUNT");
        public final static Property Price = new Property(8, Double.class, "price", false, "PRICE");
    };


    public GiftRecommentEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GiftRecommentEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GIFT_RECOMMENT_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'RECOMMEN_ID' INTEGER," + // 1: recommenId
                "'NAME' TEXT," + // 2: name
                "'IMG_ICON_URL' TEXT," + // 3: imgIconUrl
                "'UTP_TIME' INTEGER," + // 4: utpTime
                "'SORT' INTEGER," + // 5: sort
                "'TYPE' INTEGER," + // 6: type
                "'WISH_COUNT' INTEGER," + // 7: wishCount
                "'PRICE' REAL);"); // 8: price
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GIFT_RECOMMENT_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GiftRecommentEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long recommenId = entity.getRecommenId();
        if (recommenId != null) {
            stmt.bindLong(2, recommenId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String imgIconUrl = entity.getImgIconUrl();
        if (imgIconUrl != null) {
            stmt.bindString(4, imgIconUrl);
        }
 
        Long utpTime = entity.getUtpTime();
        if (utpTime != null) {
            stmt.bindLong(5, utpTime);
        }
 
        Integer sort = entity.getSort();
        if (sort != null) {
            stmt.bindLong(6, sort);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(7, type);
        }
 
        Integer wishCount = entity.getWishCount();
        if (wishCount != null) {
            stmt.bindLong(8, wishCount);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(9, price);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GiftRecommentEntity readEntity(Cursor cursor, int offset) {
        GiftRecommentEntity entity = new GiftRecommentEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // recommenId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imgIconUrl
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // utpTime
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // sort
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // wishCount
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8) // price
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GiftRecommentEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecommenId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImgIconUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUtpTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setSort(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setWishCount(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setPrice(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GiftRecommentEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GiftRecommentEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
