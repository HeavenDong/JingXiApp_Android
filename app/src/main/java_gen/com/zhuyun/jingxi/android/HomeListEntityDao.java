package com.zhuyun.jingxi.android;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zhuyun.jingxi.android.HomeListEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HOME_LIST_ENTITY.
*/
public class HomeListEntityDao extends AbstractDao<HomeListEntity, Long> {

    public static final String TABLENAME = "HOME_LIST_ENTITY";

    /**
     * Properties of entity HomeListEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WishId = new Property(1, Long.class, "wishId", false, "WISH_ID");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property PortraitUrl = new Property(3, String.class, "portraitUrl", false, "PORTRAIT_URL");
        public final static Property Gender = new Property(4, Integer.class, "gender", false, "GENDER");
        public final static Property UtpTime = new Property(5, Long.class, "utpTime", false, "UTP_TIME");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property ImgUrl = new Property(7, String.class, "imgUrl", false, "IMG_URL");
        public final static Property GoodsName = new Property(8, String.class, "goodsName", false, "GOODS_NAME");
        public final static Property Type = new Property(9, Integer.class, "type", false, "TYPE");
        public final static Property CfPrice = new Property(10, Double.class, "cfPrice", false, "CF_PRICE");
        public final static Property LikeNum = new Property(11, Integer.class, "likeNum", false, "LIKE_NUM");
        public final static Property CommNum = new Property(12, Integer.class, "commNum", false, "COMM_NUM");
        public final static Property IsFriend = new Property(13, Integer.class, "isFriend", false, "IS_FRIEND");
        public final static Property WishUserId = new Property(14, Long.class, "wishUserId", false, "WISH_USER_ID");
        public final static Property IsLiked = new Property(15, Integer.class, "isLiked", false, "IS_LIKED");
    };


    public HomeListEntityDao(DaoConfig config) {
        super(config);
    }
    
    public HomeListEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HOME_LIST_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'WISH_ID' INTEGER," + // 1: wishId
                "'NICK_NAME' TEXT," + // 2: nickName
                "'PORTRAIT_URL' TEXT," + // 3: portraitUrl
                "'GENDER' INTEGER," + // 4: gender
                "'UTP_TIME' INTEGER," + // 5: utpTime
                "'CONTENT' TEXT," + // 6: content
                "'IMG_URL' TEXT," + // 7: imgUrl
                "'GOODS_NAME' TEXT," + // 8: goodsName
                "'TYPE' INTEGER," + // 9: type
                "'CF_PRICE' REAL," + // 10: cfPrice
                "'LIKE_NUM' INTEGER," + // 11: likeNum
                "'COMM_NUM' INTEGER," + // 12: commNum
                "'IS_FRIEND' INTEGER," + // 13: isFriend
                "'WISH_USER_ID' INTEGER," + // 14: wishUserId
                "'IS_LIKED' INTEGER);"); // 15: isLiked
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HOME_LIST_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HomeListEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long wishId = entity.getWishId();
        if (wishId != null) {
            stmt.bindLong(2, wishId);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String portraitUrl = entity.getPortraitUrl();
        if (portraitUrl != null) {
            stmt.bindString(4, portraitUrl);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(5, gender);
        }
 
        Long utpTime = entity.getUtpTime();
        if (utpTime != null) {
            stmt.bindLong(6, utpTime);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(8, imgUrl);
        }
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(9, goodsName);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(10, type);
        }
 
        Double cfPrice = entity.getCfPrice();
        if (cfPrice != null) {
            stmt.bindDouble(11, cfPrice);
        }
 
        Integer likeNum = entity.getLikeNum();
        if (likeNum != null) {
            stmt.bindLong(12, likeNum);
        }
 
        Integer commNum = entity.getCommNum();
        if (commNum != null) {
            stmt.bindLong(13, commNum);
        }
 
        Integer isFriend = entity.getIsFriend();
        if (isFriend != null) {
            stmt.bindLong(14, isFriend);
        }
 
        Long wishUserId = entity.getWishUserId();
        if (wishUserId != null) {
            stmt.bindLong(15, wishUserId);
        }
 
        Integer isLiked = entity.getIsLiked();
        if (isLiked != null) {
            stmt.bindLong(16, isLiked);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HomeListEntity readEntity(Cursor cursor, int offset) {
        HomeListEntity entity = new HomeListEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // wishId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // portraitUrl
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // gender
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // utpTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // imgUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // goodsName
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // type
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // cfPrice
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // likeNum
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // commNum
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // isFriend
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // wishUserId
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15) // isLiked
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HomeListEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWishId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPortraitUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGender(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUtpTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImgUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGoodsName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setCfPrice(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setLikeNum(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setCommNum(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setIsFriend(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setWishUserId(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setIsLiked(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HomeListEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HomeListEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
